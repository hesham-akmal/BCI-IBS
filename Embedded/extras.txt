/*
void PduR_BufferInc(PduRTxBuffer_type *Buffer, uint8 **ptr) {
	(*ptr) = (*ptr) + Buffer->Length;

	// TODO make more efficient without multiplication.
	//lint -e946 //PC-Lint Exception of MISRA rule 17.3
	if ( *ptr >= ( Buffer->Buffer + (Buffer->Depth * Buffer->Length) ) ) {
		*ptr = Buffer->Buffer;
	}
	//  *val = (*val + 1) % Buffer->Depth;
}

void PduR_BufferQueue(PduRTxBuffer_type *Buffer, const uint8 * SduPtr) {
    imask_t state;
    Irq_Save(state);

	if (PduR_BufferIsFull(Buffer)) { // Buffer is full
		PduR_BufferFlush(Buffer);
#if defined(USE_DEM)
		Dem_ReportErrorStatus(PDUR_E_PDU_INSTANCE_LOST, DEM_EVENT_STATUS_FAILED);
#endif

	} else {
		// Copy data to last place in buffer
		memcpy(Buffer->Last, SduPtr, sizeof(uint8) * Buffer->Length);

		PduR_BufferInc(Buffer, &Buffer->Last);
		Buffer->NrItems++;
		DEBUG(DEBUG_LOW,"\tBuffer %d: Queued data %d. Status: NrItems %d, First %d, Last %d\n", Buffer->BufferId, *SduPtr, Buffer->NrItems, *Buffer->First, *Buffer->Last);

	}
    Irq_Restore(state);
}

void PduR_BufferDeQueue(PduRTxBuffer_type *Buffer, uint8 *SduPtr) {
    imask_t state;
    Irq_Save(state);

	if (Buffer->NrItems > 0) {
		memcpy(SduPtr, Buffer->First, sizeof(uint8) * Buffer->Length);
		PduR_BufferInc(Buffer, &Buffer->First);
		Buffer->NrItems--;
		DEBUG(DEBUG_LOW,"\tBuffer %d: DeQueueing data. Status: NrItems %d, First %d, Last %d\n", Buffer->BufferId, Buffer->NrItems, *Buffer->First, *Buffer->Last);
	} else {
		DEBUG(DEBUG_LOW,"\tBuffer %d: Buffer is empty, nothing to dequeue!\n", Buffer->BufferId);
	}
    Irq_Restore(state);
}

void PduR_BufferFlush(PduRTxBuffer_type *Buffer) {
	DEBUG(DEBUG_LOW,"\tBuffer %d: Flushing!\n", Buffer->BufferId);
    imask_t state;
    Irq_Save(state);
	Buffer->NrItems = 0;
	Buffer->First = Buffer->Buffer;
	Buffer->Last = Buffer->Buffer;
	Buffer->TxConfP = 0;
    Irq_Restore(state);
}

uint8 PduR_BufferIsFull(PduRTxBuffer_type *Buffer) {
    imask_t state;
    Irq_Save(state);
	uint8 rv = 0;
	if (Buffer->NrItems < Buffer->Depth) {
		rv = 0;
	} else {
		rv = 1;
	}
    Irq_Restore(state);
	return rv;
}
*/

#if PDUR_VERSION_INFO_API == STD_ON

/* @req PDUR217  */
/* @req PDUR338 */
void PduR_GetVersionInfo (Std_VersionInfoType* versionInfo){
	versionInfo->moduleID = (uint16)MODULE_ID_PDUR;
	versionInfo->vendorID = 60u;
    versionInfo->sw_major_version = PDUR_SW_MAJOR_VERSION;
    versionInfo->sw_minor_version = PDUR_SW_MINOR_VERSION;
    versionInfo->sw_patch_version = PDUR_SW_PATCH_VERSION;
    versionInfo->ar_major_version = PDUR_AR_RELEASE_MAJOR_VERSION;
    versionInfo->ar_minor_version = PDUR_AR_RELEASE_MINOR_VERSION;
    versionInfo->ar_patch_version = PDUR_AR_RELEASE_REVISION_VERSION;
}
#endif

/* !req PDUR341 Change return type */
uint32 PduR_GetConfigurationId (void) {
	//PduR_DevCheck(0,1,0x18,E_NOT_OK);

	/* @req PDUR280 */
	return PduRConfig->PduRConfigurationId;
}

/* !req PDUR615 */
void PduR_EnableRouting(PduR_RoutingPathGroupIdType id) {
    // TODO: implement
	(void)id;
}

/* !req PDUR617 */
void PduR_DisableRouting(PduR_RoutingPathGroupIdType id) {
    // TODO: implement
	(void)id;
}


#endif



